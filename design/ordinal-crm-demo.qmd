---
title: "oCRM demonstration"
editor: visual
format:
  html:
    embed-resources: true
---

```{r}
#| label: setup
#| echo: FALSE
suppressPackageStartupMessages({
  library(tidyverse)
  library(knitr)
  library(kableExtra)
  library(truncnorm)
  library(crmPack)
  library(checkmate)
  library(broom)
  library(runjags)
})

mcmcSummary <- function(d) {
  suppressWarnings({
    d$alpha %>%
      tidy() %>%
      mutate(Sample = 1:nrow(.), Alpha1 = x[1], Alpha2 = x[2]) %>%
      select(-x) %>%
      full_join(
        d$beta %>% tidy() %>%
          mutate(Sample = 1:nrow(.), Beta = x) %>%
          select(-x),
        by = "Sample"
      ) %>%
      expand(nesting(Alpha1, Alpha2, Beta), Dose = emptyData@doseGrid) %>%
      mutate(
        Z1 = exp(Alpha1 + exp(Beta) * log(Dose / model@ref_dose)),
        Z2 = exp(Alpha2 + exp(Beta) * log(Dose / model@ref_dose)),
        Prob1 = Z1 / (1 + Z1),
        Prob2 = Z2 / (1 + Z2)
      ) %>%
      pivot_longer(
        starts_with("Prob"),
        names_to = "Category",
        values_to = "Prob",
        names_prefix = "Prob"
      ) %>%
      group_by(Dose, Category) %>%
      summarise(
        Median = median(Prob),
        Q10 = quantile(Prob, probs = 0.1),
        Q90 = quantile(Prob, probs = 0.9),
        .groups = "drop"
      )
  })
}

summaryTable <- function(summary, data, caption) {
  summary %>%
    arrange(Category, Dose) %>%
    select(-Category) %>%
    kable(
      caption = caption,
      digits = c(0, 2, 2, 2),
      col.names = c("Dose", "Median", "10th centile", "90th centile"),
      table.attr = "style='width:50%;'"
    ) %>%
    pack_rows(
      names(data@yCategories)[2],
      1,
      length(data@doseGrid)
    ) %>%
    pack_rows(
      names(data@yCategories)[3],
      length(data@doseGrid) + 1,
      2 * length(data@doseGrid)
    ) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
}
```

## Test data

Based on a real (non-Roche) study, using a three category toxicity scale (0="No event", 1="sub-toxic
AE", 2="DLT").

The doses used were 1, 2, 4, 8, 16 and 30 units. (Doses of 40 and 50 were also available, but were
not used.)

The prior distribution of model parameters was

$$
\begin{bmatrix}
\alpha_1 \\ \alpha_2 \\ log(\beta)
\end{bmatrix} 
\sim 
N 
\left( 
\begin{bmatrix}
4 \\ 3 \\ 0
\end{bmatrix},
\begin{bmatrix}
3 & 0 & 0\\ 0 & 4 & 0 \\ 0 & 0 & 1
\end{bmatrix}
\right)
$$

```{r}
#| label: test-data
#| echo: FALSE
df <- tibble(
  PatNo = 1:15,
  Cohort = c(rep(1:7, each = 2), 8),
  Dose = c(1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 30, 30, 30, 30, 30),
  ToxStatus = c(0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 1)
)

df %>%
  kable(
    col.names = c("Subject", "Cohort", "Dose", "Tox status"),
    caption = "Observed data"
  ) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## The Ordinal CRM model

### Define the oCRM model objects (almost) as specified in the design document

`alpha[j] ~ dnorm(meanAlpha[j], precAlpha[j]) T(, alpha[j-1])` is valid JAGS syntax, but not valid R syntax. Note the use of the `%_%` operator to overcome this. For details, see the online doc for `h_jags_write_model()`.

> TODO: Need to convert the vector of integer categories `y` to a matrix of indicator values `DLT[,]` where `DLT[i, j] = (y[i] >= j)`.  I'm not sure how best to do this within the `crmPack` ecosystem.  See the validation section below for an example implementation.

```{r}
#| label: model-functions
#| error: TRUE

.DataOrdinal <- setClass(
  Class = "DataOrdinal",
  contains = "GeneralData",
  slots = c(
    params = "ModelParamsNormal",
    x = "numeric",
    y = "integer",
    doseGrid = "numeric",
    nGrid = "integer",
    xLevel = "integer",
    yCategories = "integer",
    placebo = "logical"
  ),
  prototype = prototype(
    x = numeric(),
    y = integer(),
    doseGrid = numeric(),
    nGrid = 0L,
    xLevel = integer(),
    yCategories = c("No DLT" = 0L, "DLT" = 1L),
    placebo = FALSE
  )
  # ,
  # validity = v_data_cat_tox
)

.Data <- setClass(
  Class = "Data",
  contains = "DataOrdinal"
  # ,
  # validity = v_data
)

.LogisticLogNormOrd <- setClass(
  Class = "LogisticLogNormalOrd",
  contains = "ModelLogNormal"
)

LogisticLogNormOrd <- function(meanAlpha, varAlpha, meanBeta, varBeta, ref_dose = 0) {
  model_ln <- ModelParamsNormal(
    mean = c(meanAlpha, meanBeta),
    cov = diag(c(varAlpha, varBeta))
  )
  .LogisticLogNormOrd(
    params = model_ln,
    ref_dose = positive_number(ref_dose),
    datamodel = function() {
      for (i in 1:15) {
        x_rel[i] <- log(x[i] / ref_dose)
        for (j in 1:length(meanAlpha)) {
          logit(p[i, j]) <- alpha[j] + beta * x_rel[i]
          DLT[i, j] ~ dbern(p[i, j])
        }
      }
    },
    priormodel = function() {
      alpha[1] ~ dnorm(meanAlpha[1], precAlpha[1, 1])
      for (j in 2:length(meanAlpha)) {
        alpha[j] ~ dnorm(meanAlpha[j], precAlpha[j, j]) %_% T(, alpha[j - 1])
      }
      beta ~ dnorm(meanBeta, precBeta)
    },
    modelspecs = function(from_prior) {
      ms <- list(
        meanAlpha = meanAlpha,
        precAlpha = solve(diag(varAlpha)),
        meanBeta = meanBeta,
        precBeta = 1 / varBeta
      )
      if (!from_prior) {
        ms$ref_dose <- ref_dose
      }
      ms
    },
    init = function(yCategories) {
      list(alpha = seq(from = 5, to = 3, length.out = length(yCategories) - 1), beta = 0)
    },
    datanames = c("nObs", "yCategories", "y", "x"),
    sample = c("alpha", "beta")
  )
}
```

### Check consequential code modifications

Modify the `ParamsLogNormal` class to allow for dimensions other than 2
```{r}
#| label: test-code-ParamsLogNormal
model_ln <- ModelParamsNormal(
  mean = c(c(3, 4), 0),
  cov = diag(c(c(4, 3), 1))
)
model_ln
```

Change the assertion in `h_jags_get_model_inits` to allow `init` to be a closure in `.LogisticLogNormOrd`.

```{r}
#| label: test-code-LogisticLogNormOrd
standardCRM <- ModelLogNormal(
  mean = c(3, 0),
  cov = matrix(c(3, 0, 0, 1), ncol = 2),
  ref_dose = 1
)
validObject(standardCRM)

oCRM <- LogisticLogNormOrd(
  meanAlpha = c(3, 4),
  varAlpha = c(4, 3),
  meanBeta = 0,
  varBeta = 1,
  ref_dose = 1
)
validObject(oCRM)
```

Also:

-   Changed the assertion in `h_jags_add_dummy` from `assert_class(object, "Data")` to
    `assert_class(object, "DataOrdinal")`.
-   Loops over `yCategories` should *I think* be from `2` to `length(yCategories)` and not any
    other variation.
-   Temporarily removed validity checking for simplicity

### Evaluate the prior

`mcmcSummary` and ` summaryTable` are utility functions defined earlier in this document.

```{r}
#| label: evaluate-prior
emptyData <- new(
  "DataOrdinal",
  doseGrid = c(1, 2, 4, 8, 16, 30, 40, 50),
  yCategories = c("No event" = 0L, "sub-toxic AE" = 1L, "DLT" = 2L)
)

model <- LogisticLogNormOrd(
  meanAlpha = c(-2, -1),
  meanBeta = 0,
  varAlpha = c(8, 4),
  varBeta = 2,
  ref_dose = 25
)

prior <- mcmc(emptyData, model, McmcOptions(samples = 25000))
priorSummary <- prior@data %>% mcmcSummary()

priorSummary %>%
  ggplot(aes(x = Dose)) +
  geom_ribbon(aes(ymin = Q10, ymax = Q90), alpha = 0.3, fill = "steelblue") +
  geom_line(aes(y = Median)) +
  theme_light() +
  facet_wrap(vars(Category), labeller = label_both) +
  labs(title = "Mean prior probability of toxicity category > x, with 80% ci")

priorSummary %>% summaryTable(emptyData, "Prior probability of toxicity category > x")
```

### Evaluate the posterior

```{r}
#| label: evaluate-posterior
postData <- new(
  "DataOrdinal",
  x = df$Dose,
  y = as.integer(df$ToxStatus),
  doseGrid = c(1, 2, 4, 8, 16, 30, 40, 50),
  yCategories = c("No event" = 0L, "sub-toxic AE" = 1L, "DLT" = 2L)
)

post <- mcmc(postData, model, McmcOptions(samples = 25000))
postSummary <- post@data %>% mcmcSummary()

postSummary %>%
  ggplot(aes(x = Dose)) +
  geom_ribbon(aes(ymin = Q10, ymax = Q90), alpha = 0.3, fill = "steelblue") +
  geom_line(aes(y = Median)) +
  theme_light() +
  facet_wrap(vars(Category), labeller = label_both) +
  labs(title = "Mean posterior probability of toxicity category > x, with 80% ci")

postSummary %>% summaryTable(emptyData, "Posterior probability of toxicity category > x")
```

## Validation

To confirm the accuracy of the results above, perform the same analysis from first principles.

### Prior

```{r}
#| label: validate-prior
priorModelString <- "
model {
  #Independent univariate parameters for clarity
  alpha[1] ~ dnorm(meanAlpha1, 1/(sdAlpha1*sdAlpha1))
  alpha[2] ~ dnorm(meanAlpha2, 1/(sdAlpha2*sdAlpha2)) T(, alpha[1])
  #Common slope.
  gamma ~ dnorm(meanLogBeta, 1/(sdLogBeta*sdLogBeta))
  beta <- exp(gamma)
}
Inits {
  list(alpha=c(5, 3), gamma=0)
}
#monitor# alpha[1], alpha[2], beta
#data# meanAlpha1, meanAlpha2, meanLogBeta, sdAlpha1, sdAlpha2, sdLogBeta
"
meanAlpha1 <- 5
meanAlpha2 <- 3
meanLogBeta <- log(1)
sdAlpha1 <- 4
sdAlpha2 <- 4
sdLogBeta <- 3

priorValidation <- as_tibble(run.jags(priorModelString)$mcmc[[1]]) %>%
  rename(Alpha1 = `alpha[1]`, Alpha2 = `alpha[2]`, Beta = beta) %>%
  expand(nesting(Alpha1, Alpha2, Beta), Dose = emptyData@doseGrid) %>%
  mutate(
    Z1 = exp(Alpha1 + exp(Beta) * log(Dose / model@ref_dose)),
    Z2 = exp(Alpha2 + exp(Beta) * log(Dose / model@ref_dose)),
    Prob1 = Z1 / (1 + Z1),
    Prob2 = Z2 / (1 + Z2)
  ) %>%
  pivot_longer(
    starts_with("Prob"),
    names_to = "Category",
    values_to = "Prob",
    names_prefix = "Prob"
  ) %>%
  group_by(Dose, Category) %>%
  summarise(
    Median = median(Prob, na.rm = TRUE),
    Q10 = quantile(Prob, probs = 0.1, na.rm = TRUE),
    Q90 = quantile(Prob, probs = 0.9, na.rm = TRUE),
    .groups = "drop"
  )

priorValidation %>%
  ggplot(aes(x = Dose)) +
  geom_ribbon(aes(ymin = Q10, ymax = Q90), alpha = 0.3, fill = "steelblue") +
  geom_line(aes(y = Median)) +
  theme_light() +
  facet_wrap(vars(Category), labeller = label_both) +
  labs(title = "Mean prior probability of toxicity category > x, with 80% ci")

priorValidation %>% summaryTable(emptyData, "Prior probability of toxicity category > x")
```

### Posterior

```{r}
#| label: validate-posterior
postModelString <- "
data {
  for (i in 1:length(d)) {
    for (j in 1:2) {
      DLT[i, j] <- r[i] >= j
    }
  }
}
model {
  #Independent univariate parameters for clarity
  alpha[1] ~ dnorm(meanAlpha1, 1/(sdAlpha1*sdAlpha1))
  alpha[2] ~ dnorm(meanAlpha2, 1/(sdAlpha2*sdAlpha2))
  #Common slope.
  gamma ~ dnorm(meanLogBeta, 1/(sdLogBeta*sdLogBeta))
  beta <- exp(gamma)
  for (i in 1:length(d)) {
    xhat[i] <- log(d[i] / dRef)
    for (j in 1:2) {
      z[i, j] <- alpha[j] + beta * xhat[i]
      p[i, j] <- exp(z[i, j]) / (1 + exp(z[i, j]))
      DLT[i, j] ~ dbern(p[i, j])
    }
  }
}
Inits {
  list(alpha=c(5, 3), gamma=0)
}
#monitor# alpha[1], alpha[2], beta
#data# meanAlpha1, meanAlpha2, meanLogBeta, sdAlpha1, sdAlpha2, sdLogBeta, d, r, dRef
"

meanAlpha1 <- 4
meanAlpha2 <- 3
meanLogBeta <- log(1)
sdAlpha1 <- 3
sdAlpha2 <- 4
sdLogBeta <- 1
d <- df$Dose
r <- df$ToxStatus
dRef <- model@ref_dose

postValidation <- as_tibble(run.jags(priorModelString)$mcmc[[1]]) %>%
  rename(Alpha1 = `alpha[1]`, Alpha2 = `alpha[2]`, Beta = beta) %>%
  expand(nesting(Alpha1, Alpha2, Beta), Dose = emptyData@doseGrid) %>%
  mutate(
    Z1 = exp(Alpha1 + exp(Beta) * log(Dose / model@ref_dose)),
    Z2 = exp(Alpha2 + exp(Beta) * log(Dose / model@ref_dose)),
    Prob1 = Z1 / (1 + Z1),
    Prob2 = Z2 / (1 + Z2)
  ) %>%
  pivot_longer(
    starts_with("Prob"),
    names_to = "Category",
    values_to = "Prob",
    names_prefix = "Prob"
  ) %>%
  group_by(Dose, Category) %>%
  summarise(
    Median = median(Prob, na.rm = TRUE),
    Q10 = quantile(Prob, probs = 0.1, na.rm = TRUE),
    Q90 = quantile(Prob, probs = 0.9, na.rm = TRUE),
    .groups = "drop"
  )

postValidation %>%
  ggplot(aes(x = Dose)) +
  geom_ribbon(aes(ymin = Q10, ymax = Q90), alpha = 0.3, fill = "steelblue") +
  geom_line(aes(y = Median)) +
  theme_light() +
  facet_wrap(vars(Category), labeller = label_both) +
  labs(title = "Mean posterior probability of toxicity category > x, with 80% ci")

postValidation %>% summaryTable(emptyData, "Posterior probability of toxicity category > x")
```

## Environment

```{r}
#| label: environment
#| echo: FALSE
sessionInfo()
```
