% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rules-methods.R
\name{maxDose}
\alias{maxDose}
\alias{maxDose,IncrementsRelative,Data-method}
\alias{maxDose-IncrementsRelative}
\alias{maxDose,IncrementsNumDoseLevels,Data-method}
\alias{maxDose-IncrementsNumDoseLevels}
\alias{maxDose,IncrementsHSRBeta,Data-method}
\alias{maxDose-IncrementsHSRBeta}
\alias{maxDose,IncrementsRelativeParts,DataParts-method}
\alias{maxDose,IncrementsRelativeDLT,Data-method}
\alias{maxDose,IncrementsRelativeDLTCurrent,Data-method}
\alias{maxDose,IncrementsMin,Data-method}
\title{Determine the Maximum Possible Next Dose}
\usage{
maxDose(increments, data, ...)

\S4method{maxDose}{IncrementsRelative,Data}(increments, data, ...)

\S4method{maxDose}{IncrementsNumDoseLevels,Data}(increments, data, ...)

\S4method{maxDose}{IncrementsHSRBeta,Data}(increments, data, ...)

\S4method{maxDose}{IncrementsRelativeParts,DataParts}(increments, data, ...)

\S4method{maxDose}{IncrementsRelativeDLT,Data}(increments, data, ...)

\S4method{maxDose}{IncrementsRelativeDLTCurrent,Data}(increments, data, ...)

\S4method{maxDose}{IncrementsMin,Data}(increments, data, ...)
}
\arguments{
\item{increments}{(\code{Increments})\cr the rule for the next best dose.}

\item{data}{(\code{Data})\cr input data.}

\item{...}{additional arguments without method dispatch.}
}
\value{
A \code{number}, the maximum possible next dose.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function determines the upper limit of the next dose based on the
\code{increments}and the \code{data}.

Increments control based on number of dose levels
Increment rule to determine the maximum possible next dose based on
maximum dose levels to increment for the next dose.
Increment rule can be applied to last dose or maximum dose given so far.

Determine the maximum possible dose for escalation.
}
\section{Functions}{
\itemize{
\item \code{maxDose(increments = IncrementsRelative, data = Data)}: determine the maximum possible next dose based on
relative increments.

\item \code{maxDose(increments = IncrementsRelativeParts, data = DataParts)}: Determine the maximum possible next dose based on
relative increments and part 1 and 2

\item \code{maxDose(increments = IncrementsRelativeDLT, data = Data)}: Determine the maximum possible next dose based on
relative increments determined by DLTs so far

\item \code{maxDose(increments = IncrementsRelativeDLTCurrent, data = Data)}: Determine the maximum possible next dose based on
relative increments determined by DLTs in the current cohort.

\item \code{maxDose(increments = IncrementsMin, data = Data)}: Determine the maximum possible next dose based on
multiple increment rules (taking the minimum across individual increments).

}}
\examples{

# Example of usage for `IncrementsRelative` maxDose class.

# Create the data.
my_data <- Data(
  x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8),
  y = c(0, 0, 0, 0, 0, 0, 1, 0),
  ID = 1:8,
  cohort = c(0, 1, 2, 3, 4, 5, 5, 5),
  doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, seq(from = 10, to = 80, by = 2))
)

# Define a rule for dose increments which allows:
#  - doubling the dose if the last dose was below 20,
#  - increasing the dose by 33\% of the last dose, only if the last dose was
#    above or equal to 20.
my_increments <- IncrementsRelative(
  intervals = c(0, 20),
  increments = c(1, 0.33)
)

# Based on the rule above, the maximum dose allowed is:
my_next_max_dose <- maxDose(my_increments, data = my_data)
# Create the data.
my_data <- Data(
  x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8, 12, 12, 12, 16, 16, 16, 10, 10, 10),
  y = c(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0),
  ID = 1:17,
  cohort = c(0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8),
  doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, seq(from = 10, to = 80, by = 2))
)

# In this first example we define a rule for dose increments which would allow:
# Maximum skip one dose level, that is 2 dose levels higher than the last dose
# given. Maximum increment is explicitly defined as:
my_increments <- IncrementsNumDoseLevels(max_levels = 2, basis_level = "last")
# Since the default method is based on the last dose given, maximum increment
# can also be defined as:
my_increments <- IncrementsNumDoseLevels(max_levels = 2)

# Based on the rule above, we then calculate the maximum dose allowed
my_max_dose <- maxDose(my_increments, data = my_data)

# In this second example we define a rule for dose increments which would allow:
# Maximum skip one dose level, that is 2 dose levels higher than the max dose
# given. Maximum increment is explicitly defined as:
my_increments <- IncrementsNumDoseLevels(max_levels = 2, basis_level = "max")

# Based on the rule above, we then calculate the maximum dose allowed.
max_dose <- maxDose(my_increments, data = my_data)

# Create the data.
my_data <- Data(
  x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8, 6, 6, 6),
  y = c(0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1),
  cohort = c(0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 6),
  doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8,
      seq(from = 10, to = 80, by = 2)
    )
)

# In this example we define a rule for dose increments that limits the further
# dose escalation to doses below 6, because dose 6 is above the probability
# toxicity threshold.
my_increments <- IncrementsHSRBeta(target = 0.3, prob = 0.95)

# Based on the rule above, we then calculate the maximum dose allowed.
my_next_max_dose <- maxDose(my_increments, data = my_data)

# Create an object of class 'DataParts'.
my_data <- DataParts(
  x = c(0.1, 0.5, 1.5),
  y = c(0, 0, 0),
  doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),
  part = c(1L, 1L, 1L),
  nextPart = 1L,
  part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10)
)

my_increments <- IncrementsRelativeParts(
  dlt_start = 0,
  clean_start = 1
)

next_max_dose <- maxDose(my_increments, data = my_data)
# nolint start

# Create the data
data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),
             y=c(0, 0, 0, 0, 0, 0, 1, 0),
             cohort=c(0, 1, 2, 3, 4, 5, 5, 5),
             doseGrid=
               c(0.1, 0.5, 1.5, 3, 6,
                 seq(from=10, to=80, by=2)))


# In this example we define a rule for dose increments which would allow:
#   - doubling the dose if no DLTs were yet observed
#   - only increasing the dose by 1.33 if 1 or 2 DLTs were already observed
#   - only increasing the dose by 1.2 if at least 3 DLTs were already observed
myIncrements <- IncrementsRelativeDLT(dlt_intervals = c(0, 1, 3),
                                      increments = c(1, 0.33, 0.2))

# Based on the rule above, we then calculate the maximum dose allowed
nextMaxDose <- maxDose(myIncrements,
                       data=data)

# nolint end

# Create the data
data <- Data(
  x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),
  y = c(0, 0, 0, 0, 0, 0, 1, 0),
  cohort = c(0, 1, 2, 3, 4, 5, 5, 5),
  doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2))
)

# In this example we define a rule for dose increments which would allow:
#   - doubling the dose if no DLTs were observed in current cohort
#   - only increasing the dose by 1.33 if 1 or 2 DLTs were observed in current cohort
#   - only increasing the dose by 1.2 if at least 3 DLTs were observed in current cohort
my_increments <- IncrementsRelativeDLTCurrent(
  dlt_intervals = c(0, 1, 3),
  increments = c(1, 0.33, 0.2)
)

# Based on the rule above, we then calculate the maximum dose allowed
next_max_dose <- maxDose(my_increments,
  data = data
)
# nolint start

# Create the data
data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8),
             y=c(0, 0, 0, 0, 0, 0, 1, 0),
             cohort=c(0, 1, 2, 3, 4, 5, 5, 5),
             doseGrid=
               c(0.1, 0.5, 1.5, 3, 6, 8,
                 seq(from=10, to=80, by=2)))


# As example, here we are combining 2 different increment rules.

# The first rule is the following:
#      maximum doubling the dose if no DLTs were observed at the current dose
#      or maximum increasing the dose by 1.33 if 1 or 2 DLTs were observed at the current dose
#      or maximum increasing the dose by 1.22 if 3 or more DLTs were observed

# The second rule is the following:
#   maximum doubling the dose if the current dose is <20
#   OR only maximum increasing the dose by 1.33 if the current dose is >=20

myIncrements1 <- IncrementsRelativeDLT(dlt_intervals = c(0, 1, 3),
                                       increments = c(1, 0.33, 0.2))

myIncrements2 <- IncrementsRelative(intervals=c(0, 20),
                                    increments=c(1, 0.33))

# Now we combine the 2 rules
combIncrement <- IncrementsMin(increments_list=
                                list(myIncrements1,myIncrements2))

# Finally we then calculate the maximum dose allowed by taking the minimum of the two rules
nextMaxDose <- maxDose(combIncrement,
                       data)

# nolint end
}
